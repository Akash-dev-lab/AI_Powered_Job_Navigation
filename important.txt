import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Link, useNavigate } from 'react-router-dom'

const AdminDashboard = () => {
  const [jobs, setJobs] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${import.meta.env.VITE_BASE_URL}/job/jobs`, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
        setJobs(response.data.jobs);
      } catch (error) {
        console.error('Failed to fetch jobs:', error.response?.data?.message || error.message);
      }
    };
    fetchJobs();
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token'); // Clear the token
    navigate('/admin-login'); // Redirect to login page
  };

  return (
    <div className='gap-5 flex flex-col'>
      <h1>Dashboard</h1>
      <button onClick={handleLogout}>Logout</button>
      <Link to="/create-job">
        <button>Create New Job</button>
      </Link>
      <div>
        {jobs.map((job) => (
          <div key={job._id}>
            <h2>{job.title}</h2>
            <p>{job.description}</p>
            <Link className='bg-blue-500' to={`/job/${job._id}`}>View Details</Link>
          </div>
        ))}
      </div>
    </div>
  );
};

export default AdminDashboard;

{
  "title": "Full Stack Developer",
  "description": "Need a Proffessional Full Stack Developer",
  "skillsRequired": ["Node.js", "React.js"],
  "location": "Mumbai",
  "salary": "50K",
  "jobType": "hybrid"
}


//Provide Jobs for Jobseekers

//Key Features Authentication: Secure user, recruiter, and admin access with role-based JWT authentication. Real-Time Updates: Use WebSockets or polling to notify recruiters and users about job status changes. Responsive Design: Ensure a seamless experience across desktop, tablet, and mobile devices.

//Development Process: 1. Recruiter Workflow Job Posting: Recruiters will submit job postings through a dedicated recruiter portal. Fields include:  Job Title Job Description Required Skills Location Salary Additional Information Request Submission: Each job posting is treated as a "Job Request," which is sent to the Admin Panel for review.  2. Admin Panel Functionality Job Approval System: Admins review job requests from recruiters and either approve or reject them.  Approved jobs are added to the live job listings displayed on the user's dashboard. Rejected jobs are flagged, and feedback is provided to recruiters for necessary changes. Admin Controls:  Manage recruiters (e.g., approve or deactivate recruiter accounts). View applications submitted by users. Monitor platform performance with insights such as job applications, approval rates, and user activity.  3. User Dashboard Job Listing Display: Users can view approved jobs dynamically updated on their dashboard, filtered by:  Location Industry Salary Range Keywords Application System: Users can apply for jobs via an "Apply Now" button for each listing. Applications are stored in the database and are visible to recruiters in their panel. 4. Backend and Database Design Models:  Recruiter: Manages recruiter profiles and job postings. Job: Tracks job details, posting status (pending/approved), and admin feedback. Application: Captures user applications for specific jobs, linked to both the user and job records. Admin: Tracks job request approvals, rejections, and system management. APIs:  Create and fetch job requests. Approve/reject job postings. Fetch approved jobs for the user dashboard. Submit and fetch job applications.  6. Frontend Design Recruiter Portal:  Job submission form with validation. Dashboard to track submitted jobs and admin feedback. Admin Panel:  Job approval interface with filtering and search options. Dashboard for managing recruiters and monitoring applications. User Dashboard:  Clean, responsive UI showing available jobs with detailed information. "My Applications" section to track job application status.

//I am Putting Admin instead of AI recommendation Job but in my future learnings I will able to put the AI recommendation concept in my project.